//#include <stdio.h>
//
////#define MyInt int
//
////typedef int MyInt;
//
//
//
//
//#define String2 char *
//
//typedef char * String;
//
//
//
//int main()
//{
//    // s1, s2是char *指针
//    String s1, s2;
//    //String s1;
//   //String s2;
//    s1 = "Jack";
//    s2 = "Rose";
//    
//    
//    // s3是char *指针，s4是char 类型
//    String2 s3, s4; // char *s3, s4;
//    char *s3;
//    char s4;
//    
//    //String2 s3 = "Jack";
//    
//    
//    
//    
//    //MyInt i = 10;
//    
//    return 0;
//}










/*
 外部函数：定义的函数能被本文件和其他文件访问。
 1> 默认情况下，所有函数都是外部函数
 2> 不允许有同名的外部函数
 
 内部函数：定义的函数只能被本文件访问，其他文件不能访问
 1> 允许不同文件中有同名的内部函数
 
 
 static对函数的作用
 1> 定义了一个内部函数
 2> 声明了一个内部函数
 
 
 extern对函数的作用
 1> 完整地定义了一个外部函数
 2> 完整地声明了一个外部函数
 */









/*
 全局变量分两种：
 外部变量：定义的变量能被本文件和其他文件访问
 1> 默认情况下，全局变量都是外部变量
 2> 不同文件中的同名外部变量，都代表着同一个变量
 
 内部变量：定义的变量只能被本文件访问，不能被其他文件访问
 1> 不同文件中的同名内部变量互不影响
 
 
 static对变量的作用：
 定义一个内部变量
 
 extern对变量的作用
 声明了一个外部变量
 
 */




//// 定义了一个外部变量
//int a;
////int a; // 这么多个a都是代表同一个a
////int a;
////int a;
//
//
//// 定义了一个内部变量
//static int b;
//
//// 声明一个外部变量
//extern int a;
//
//int main()
//{
//    b = 10;
//    
//    extern int a;
//    
//    a = 10;
//    
//    return 0;
//}
//
//int a;











//#include <stdio.h>
///*
////static修饰局部变量的使用场合：
//1.如果某个函数的调用频率特别高
//2.这个函数内部的某个变量值是固定不变的
//*/
//void test()
//{
//    int a = 0;
//    a++;
//    printf("a的值是%d\n", a); // 1 // 1 // 1
//    
//    // static修饰局部变量
//    // 延长局部变量的生命周期：程序结束时候，局部变量才会被销毁
//    // 并没有改变局部变量的作用域
//    // 所有的test函数都共享着一个变量b
//    static b = 0;
//    b++;
//    printf("b的值是%d\n", b); // 1 // 2 // 3
//}
//
//int main()
//{
//    test(); // 函数结束时，int a的局部变量将会被销毁，static b不会被销毁
//    test(); // 函数执行时，查找内存中是否有static b的值，发现有，会忽略static b = 0；这句
//    test();
//    return 0;
//}











///*
// 设计一个函数，用来计算b的n次方
// 
// 递归的两个条件
// 1.函数自己调用自己
// 2.必须有个明确地返回值
// */
//#include <stdio.h>
//
//int pow2(int b, int n);
//
//int main()
//{
//    int c = pow2(2, 3);
//    
//    printf("%d\n", c);
//    
//    result 0;
//}
//
//
//
//
//
//
///*
// pow2(b, 0) == 1
// pow2(b, 1) == b == pow2(b, 0) * b
// pow2(b, 2) == b*b == pow2(b, 1) * b
// pow2(b, 3) == b*b*b == pow2(b, 2) * b
// 
// 
// 
// 1> n为0，结果肯定是1
// 
// 2> n>0, pow2(b, n) == pow2(b, n-1) * b
// */
//
//
//
//
//
///*
//int pow2(int b, int n)
//{
//    // 用来保存计算结果
//    int result = 1;
//    
//    for (int i = 0; i<n; i++) {
//        result *= b;
//    }
//    
//    
//    return result;
//}
//*/
//
//int pow2(int b, int n)
//{
//    if (n <= 0) return 1;
//    
//    return pow2(b, n-1) * b;
//}
//







///*
// 根据变量的作用域，可以分为：
// 1.局部变量：
// 1> 定义：在函数（代码块）内部定义的变量
// 2> 作用域：从定义变量的那一行开始，一直到代码结束后，就会被回收
// 3> 生命周期：从定义变量的那一行开始分配存储空间，代码块结束后，就会被回收
// 4> 没有固定的初始值
// 
// 2.全局变量
// 1> 定义：在函数外面定义的变量
// 2> 作用域：从定义变量的那一行开始，一直到文件的结尾
// 3> 生命周期：程序一启动就会分配存储空间，程序退出时才会被销毁
// 4> 默认的初始值就是0；
// 
// */
//
//int b = 20;
//
//void test()
//{
//    b++;
//    
//    int i = 0;
//    i++；
//    
//    printf("b=%d, i=%d\n", b, i);
//}
//
//
//
//int main()
//{
//    test();
//    test();
//    test();
//    
//    return 0;
//}
//









